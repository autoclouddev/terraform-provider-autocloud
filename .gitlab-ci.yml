---
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^docs\(CHANGELOG\)/'
      when: never
    - when: always

stages:
  - validate
  - create tag
  - notify

golangci-lint:
  image: golangci/golangci-lint:v1.50.0
  stage: validate
  cache:
    key: $CI_COMMIT_BRANCH
    paths:
      - .lint-cache/
    policy: pull-push
  variables:
    GOLANGCI_LINT_CACHE: "$CI_PROJECT_DIR/.lint-cache/"
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  before_script:
    - mkdir -p .lint-cache
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - go env -w GOPRIVATE=gitlab.com/${CI_PROJECT_NAMESPACE}
  script:
    - golangci-lint run --color never -j $(getconf _NPROCESSORS_ONLN)

create tag:
  image: "aplyca/semantic-release"
  stage: create tag
  variables:
    # Set git commit identity
    GIT_AUTHOR_NAME: "AutoCloud Deploy Bot"
    GIT_AUTHOR_EMAIL: "no-reply@loudcloud.dev"
    GIT_COMMITTER_NAME: "AutoCloud Deploy Bot"
    GIT_COMMITTER_EMAIL: "no-reply@loudcloud.dev"
  script:
    - semantic-release
  only:
    - main

.curlcmd: &curlcmd >
  curl
  -sS
  -X POST
  --data-urlencode "payload={\"attachments\":[{\"fallback\":\"$GITLAB_USER_NAME released new $CI_PROJECT_TITLE version $CI_COMMIT_TAG\",\"color\":\"good\",\"author_name\":\"$GITLAB_USER_NAME ($GITLAB_USER_LOGIN)\",\"author_icon\":\"$GITLAB_USER_AVATAR\",\"author_link\":\"https://gitlab.com/$GITLAB_USER_LOGIN\",\"title\":\"Version $CI_COMMIT_TAG of $CI_PROJECT_NAME released\",\"title_link\":\"$CI_PROJECT_URL/-/tags/$CI_COMMIT_TAG\",\"fields\":[{\"title\":\"Tag\",\"value\":\"<$CI_PROJECT_URL/commits/$CI_COMMIT_TAG|$CI_COMMIT_TAG>\",\"short\":true},{\"title\":\"Commit\",\"value\":\"<$CI_PROJECT_URL/tree/$CI_COMMIT_SHA|$CI_COMMIT_TITLE>\",\"short\":true}],\"footer\":\"$CI_PROJECT_NAME\",\"ts\":$( date +%s )}]}"
  $SLACK_API_ENDPOINT

notify:
  image: alpine:latest
  stage: notify
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - echo "noop"
  script:
    - apk add --no-cache curl
    - GITLAB_USER_AVATAR=$( echo $GITLAB_USER_EMAIL | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | md5sum | awk -F' ' '{print $1}' | xargs -I{} echo 'https://www.gravatar.com/avatar/{}?s=80&d=identicon' )
    - *curlcmd
