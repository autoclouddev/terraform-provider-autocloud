---
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^docs\(CHANGELOG\)/'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_MESSAGE =~ /^docs\(CHANGELOG\)/'
      when: never
    - when: always

stages:
  - init
  - validate
  - create tag
  - build
  - publish
  - notify

variables:
  GOPATH: $CI_PROJECT_DIR/.go

.set_version: &set_version
  - export VERSION=$(echo ${CI_COMMIT_TAG} | sed -En "s/v//p")

.before_script_template: &private_golang_access
  - echo -e "machine gitlab.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
  - go env -w GOPRIVATE=gitlab.com/${CI_PROJECT_NAMESPACE}
  - mkdir -p .go

vendor:
  image: golang:1.19-alpine
  stage: init
  variables:
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1
  rules:
    - when: always
  cache:
    key: "${CI_COMMIT_REF_NAME}-godeps"
    paths:
      - .go/pkg/mod/
    policy: pull-push
  before_script:
    - *set_version
    - *private_golang_access
    - apk add --no-cache git make zip
  script:
    - go mod vendor

golangci-lint:
  image: golangci/golangci-lint:v1.50.0
  stage: validate
  cache:
    - key: "${CI_COMMIT_REF_NAME}-golint-cache"
      paths:
        - .lint-cache/
      policy: pull-push
    - key: "${CI_COMMIT_REF_NAME}-godeps"
      paths:
        - .go/pkg/mod/
      policy: pull
  variables:
    GOLANGCI_LINT_CACHE: "$CI_PROJECT_DIR/.lint-cache/"
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  before_script:
    - *set_version
    - *private_golang_access
    - mkdir -p .lint-cache
  script:
    - golangci-lint run --color never -j $(getconf _NPROCESSORS_ONLN)

create tag:
  image: "aplyca/semantic-release"
  stage: create tag
  variables:
    # Set git commit identity
    GIT_AUTHOR_NAME: "AutoCloud Deploy Bot"
    GIT_AUTHOR_EMAIL: "no-reply@loudcloud.dev"
    GIT_COMMITTER_NAME: "AutoCloud Deploy Bot"
    GIT_COMMITTER_EMAIL: "no-reply@loudcloud.dev"
  script:
    - semantic-release
  only:
    - main
    - develop

.build:
  image: golang:1.19-alpine
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  cache:
    key: "${CI_COMMIT_REF_NAME}-godeps"
    paths:
      - .go/pkg/mod/
    policy: pull
  artifacts:
    paths:
      - binaries/autoclouddev-autocloud_*_${ARCH}.zip
  before_script:
    - *set_version
    - *private_golang_access
    - apk add --no-cache git make zip
  script:
    - make release-${ARCH}
    - ls -al ./binaries

build darwin_amd64:
  extends: .build
  variables:
    ARCH: darwin_amd64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build darwin_arm64:
  extends: .build
  variables:
    ARCH: darwin_arm64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build freebsd_386:
  extends: .build
  variables:
    ARCH: freebsd_386
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build freebsd_amd64:
  extends: .build
  variables:
    ARCH: freebsd_amd64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build freebsd_arm:
  extends: .build
  variables:
    ARCH: freebsd_arm
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build freebsd_arm64:
  extends: .build
  variables:
    ARCH: freebsd_arm64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build linux_386:
  extends: .build
  variables:
    ARCH: linux_386
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build linux_amd64:
  extends: .build
  variables:
    ARCH: linux_amd64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build linux_arm:
  extends: .build
  variables:
    ARCH: linux_arm
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build linux_arm64:
  extends: .build
  variables:
    ARCH: linux_arm64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build openbsd_386:
  extends: .build
  variables:
    ARCH: openbsd_386
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build openbsd_amd64:
  extends: .build
  variables:
    ARCH: openbsd_amd64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build openbsd_arm:
  extends: .build
  variables:
    ARCH: openbsd_arm
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build openbsd_arm64:
  extends: .build
  variables:
    ARCH: openbsd_arm64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build windows_386:
  extends: .build
  variables:
    ARCH: windows_386
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build windows_amd64:
  extends: .build
  variables:
    ARCH: windows_amd64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build windows_arm:
  extends: .build
  variables:
    ARCH: windows_arm
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

build windows_arm64:
  extends: .build
  variables:
    ARCH: windows_arm64
    KUBERNETES_CPU_REQUEST: 500m
    KUBERNETES_CPU_LIMIT: 1

publish to citizen:
  # image: harbor.tools.autocloud.dev/autocloud/registry:latest
  image: autocloudiac/registry:0.6.0
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  variables:
    # These values will be superseded by any variables defined in the group and project settings
    CITIZEN_ADDR: https://citizen.tools.autocloud.dev
    CITIZEN_DATABASE_TYPE: mongodb
    CITIZEN_GPG_PASSPHRASE: $GPG_PASSPHRASE
    SECURE_FILES_DOWNLOAD_PATH: "./gpg"
  before_script:
    - *set_version
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/load-secure-files/-/raw/main/installer" | bash
    - gpg --import ./gpg/tf_reg_sign_public.key
    - gpg --import --pinentry-mode=loopback --passphrase "${CITIZEN_GPG_PASSPHRASE}" ./gpg/tf_reg_sign_private.key
  script:
    - cd binaries
    - ls -1
    - citizen provider autoclouddev autocloud ${VERSION} -g D59E9C37

.curlcmd: &curlcmd >
  curl
  -sS
  -X POST
  --data-urlencode "payload={\"attachments\":[{\"fallback\":\"$GITLAB_USER_NAME released new $CI_PROJECT_TITLE version $CI_COMMIT_TAG\",\"color\":\"good\",\"author_name\":\"$GITLAB_USER_NAME ($GITLAB_USER_LOGIN)\",\"author_icon\":\"$GITLAB_USER_AVATAR\",\"author_link\":\"https://gitlab.com/$GITLAB_USER_LOGIN\",\"title\":\"Version $CI_COMMIT_TAG of $CI_PROJECT_NAME released\",\"title_link\":\"$CI_PROJECT_URL/-/tags/$CI_COMMIT_TAG\",\"fields\":[{\"title\":\"Tag\",\"value\":\"<$CI_PROJECT_URL/commits/$CI_COMMIT_TAG|$CI_COMMIT_TAG>\",\"short\":true},{\"title\":\"Commit\",\"value\":\"<$CI_PROJECT_URL/tree/$CI_COMMIT_SHA|$CI_COMMIT_TITLE>\",\"short\":true}],\"footer\":\"$CI_PROJECT_NAME\",\"ts\":$( date +%s )}]}"
  $SLACK_API_ENDPOINT

notify:
  image: alpine:latest
  stage: notify
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - echo "noop"
  script:
    - apk add --no-cache curl
    - GITLAB_USER_AVATAR=$( echo $GITLAB_USER_EMAIL | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | md5sum | awk -F' ' '{print $1}' | xargs -I{} echo 'https://www.gravatar.com/avatar/{}?s=80&d=identicon' )
    - *curlcmd
